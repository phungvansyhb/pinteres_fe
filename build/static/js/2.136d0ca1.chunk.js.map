{"version":3,"sources":["components/Pin.js","api/Image.js","components/Mainboard.js","components/AddComment.js","api/Base.js","styledCss/TextStyled.js","components/Comment.js","api/Comment.js","components/ImageDetail.js"],"names":["Pin","srcImage","title","_id","description","createdAt","updatedAt","amountComment","navigate","useNavigate","handleDownload","useCallback","e","stopPropagation","FileSaver","saveAs","Date","now","toString","className","onClick","src","alt","padding","bgColor","PALLET","RED","color","WHITE","style","fontWeight","display","alignItems","ModalStyled","styled","Modal","Image","this","category","subCategory","nameMember","updateAt","id","Base","get","data","post","page","limit","params","name","Mainboard","pins","sort","a","b","Math","random","map","pin","index","urls","key","AddComment","setShowFormReply","parentId","isReply","useContext","ImageContext","imageId","createCommentFunc","useState","showForm","toggleShowForm","nameRef","useRef","contentRef","FormWrapper","flexDirection","htmlFor","type","ref","cols","rows","justifyContent","userName","current","value","content","username","image_id","send","focus","handleSubmit","GRAY","BLACK","div","axios","create","baseURL","process","headers","Authorization","TextStyled","p","props","fontSize","defaultComment","reply","RenderComment","localComment","isChild","isShowFormReply","FlexStyled","gap","width","dangerouslySetInnerHTML","__html","toLocaleString","Comment","comment","length","item","SOCKET_EVENT","createContext","editHeader","socket","socketIO","ImageDetail","useParams","imageDetail","setImageDetail","commentList","setCommentList","useQuery","ImageModel","getDetail","result","images","detail","references","initialData","enabled","onSuccess","isFetching","refetch","CommentModel","getCommentByImageId","comments","fetchingComment","showCommentList","toggleShowComment","isEdit","toggleEdit","connected","isConnected","setIsConnected","useEffect","console","log","on","off","emit","newComment","oldComment","updatedImage","titleInputEditRef","descriptionInputEditRef","CircularProgress","Provider","BoxStyled","Grid","container","spacing","xs","md","defaultValue","BtnArrowIconStyled","ArrowDownward","transition","transform","CommentBlockWrapper","Box","IconButtonStyled"],"mappings":"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","file":"static/js/2.136d0ca1.chunk.js","sourcesContent":["import React, {useCallback} from \"react\";\nimport \"./Pin.css\";\nimport Modal from \"@material-ui/core/Modal\";\nimport styled from \"styled-components\";\nimport Box from \"@material-ui/core/Box\";\nimport {IconButtonStyled} from '../styledCss/ButtonStyled'\nimport {PALLET} from \"../styledCss/Theme\";\nimport Forum from \"@material-ui/icons/Forum\";\nimport FileSaver from 'file-saver'\nimport {CloudDownload} from \"@material-ui/icons\";\nimport {useNavigate} from \"react-router-dom\";\nimport LazyLoad from 'react-lazyload'\n\nfunction Pin({srcImage, title, description, createdAt, updatedAt, _id, amountComment, ...props}) {\n    const navigate = useNavigate()\n    const handleDownload = useCallback((e) => {\n        e.stopPropagation();\n        if (srcImage) {\n            FileSaver.saveAs(srcImage, title || 'image' + Date.now().toString())\n        }\n    }, [srcImage])\n    /* TODO : call api load comment */\n    return (\n        <>\n            <div className=\"pin\">\n                <div className=\"pin__container\" onClick={() => navigate(`/image/${_id}`)}>\n\n                    <img src={srcImage} alt=\"pin\"/>\n                    <div className='pin__itemOverlay'>\n                        <IconButtonStyled padding={'8px'} bgColor={PALLET.RED} color={PALLET.WHITE}\n                                          onClick={handleDownload}>\n                            <CloudDownload/>\n                        </IconButtonStyled>\n\n                        <div style={{color: PALLET.WHITE, fontWeight: 700, display: 'flex', alignItems: 'center'}}>\n                            {amountComment} <Forum/>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n        </>\n    );\n}\n\nexport default Pin;\n\nexport const ModalStyled = styled(Modal)`\n  outline: 0;\n`;\n","import {Base} from './Base'\n\nclass Image {\n    constructor() {\n        this._id = ''\n        this.title = ''\n        this.description = ''\n        this.srcImage = ''\n        this.category = ''\n        this.subCategory = ''\n        this.nameMember = ''\n        this.amountComment = 0\n        this.createdAt = Date.now()\n        this.updateAt = Date.now()\n    }\n\n    getDetail(id) {\n        return Base.get(`/image/${id}`)\n    }\n\n    uploadToCloudinary(data) {\n        return Base.post('/upload', data)\n    }\n\n    createImage(data) {\n\n    }\n\n    getAllExcludeK16(page , limit) {\n        return Base.get('/' , {params : {page : page , limit : 20}})\n    }\n    getK16Only(page , limit) {\n        return Base.get('/k16' , {params : {page : page , limit : 20}})\n    }\n\n    searchByName(name , page) {\n        return Base.get('/images/by-name', {params: {name: name , page : page , limit : 20}})\n    }\n\n    searchByCategory(category , page) {\n        return Base.get('/images', {params: {category: category , page : page ,limit : 20}})\n    }\n}\n\nexport default new Image()\n","import React from \"react\";\nimport Pin from \"./Pin\";\nimport \"./Mainboard.css\";\n\nfunction Mainboard({pins, ...props}) {\n    return (\n        <div className=\"mainboard\">\n            <div className=\"mainboard__container\">\n                {pins.sort(function (a, b) {\n                    return 0.5 - Math.random();\n                }).map((pin, index) => {\n                    let {srcImage} = pin;\n                    return <Pin urls={srcImage} {...pin} key={index}/>;\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default Mainboard;\n","import React, {useContext, useImperativeHandle, useRef, useState} from 'react';\nimport {FlexStyled} from \"../styledCss/FlexStyled\";\nimport styled from \"styled-components\";\nimport {IconButtonStyled} from \"../styledCss/ButtonStyled\";\nimport {PALLET} from \"../styledCss/Theme\";\nimport {ImageContext} from \"./ImageDetail\";\n\nfunction AddComment({setShowFormReply, parentId, isReply, ...props}) {\n    const {imageId, createCommentFunc  } = useContext(ImageContext)\n    const [showForm, toggleShowForm] = useState(!!isReply)\n    const nameRef = useRef()\n    const contentRef = useRef()\n\n    function handleSubmit() {\n        const userName = nameRef.current.value;\n        const content = contentRef.current.value\n        if (!userName) {\n            nameRef.current.focus()\n            return false\n        }\n        if (!content) {\n            contentRef.current.focus()\n            return false\n\n        }\n        if (userName && content) {\n            if (isReply && parentId) {\n                createCommentFunc({\n                    username: userName,\n                    content: content,\n                    image_id: parentId,\n                    createdAt: Date.now(),\n                    send : 'replyComment'\n                })\n            } else {\n                createCommentFunc({username: userName, content: content, image_id: imageId, createdAt: Date.now()})\n            }\n        }\n    }\n\n    return (\n        <>\n            {\n                (!showForm && !isReply) ?\n                    <IconButtonStyled bgColor={PALLET.GRAY} color={PALLET.BLACK} onClick={() => toggleShowForm(true)}>\n                        Add Comment</IconButtonStyled>\n                    :\n                    <FormWrapper flexDirection='column'>\n                        <FlexStyled alignItems='center'>\n                            <label htmlFor='userName'>Name</label>\n                            <input type=\"text\" name=\"userName\" ref={nameRef}/>\n                        </FlexStyled>\n                        <FlexStyled alignItems='center'>\n                            <label htmlFor='content'>Content</label>\n                            <textarea name=\"content\" id=\"content\" cols=\"30\" rows=\"5\" ref={contentRef}/>\n                        </FlexStyled>\n\n                        <FlexStyled justifyContent='center'>\n                            <IconButtonStyled bgColor={PALLET.RED} color={PALLET.WHITE} type='submit'\n                                              onClick={() => handleSubmit()}>Send</IconButtonStyled>\n                            <IconButtonStyled bgColor={PALLET.GRAY}\n                                              onClick={() => {\n                                                  toggleShowForm(false)\n                                                  if (setShowFormReply) {\n                                                      setShowFormReply(false)\n                                                  }\n                                              }}>Cancel</IconButtonStyled>\n                        </FlexStyled>\n                    </FormWrapper>\n            }\n        </>\n\n\n    );\n}\n\nexport default AddComment;\n\nexport const FormWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  background-color: #f5f5f5;\n  padding: 12px;\n  border-radius: 12px;\n\n  label {\n    font-weight: 600;\n    margin-right: 8px;\n    max-width: 80px;\n  }\n\n  input {\n    border: 1px solid lightgray;\n    font-size: 16px;\n    height: 30px;\n    border-radius: 8px;\n    flex-grow: 1;\n    padding-left: 8px;\n    width: inherit;\n  }\n\n  textarea {\n    flex-grow: 1;\n    width: inherit;\n    border: 1px solid lightgray;\n    font-size: 16px;\n    border-radius: 8px;\n    padding-left: 8px;\n\n\n  }\n\n  textarea, input:focus {\n    outline: lightcoral;\n    outline-offset: 1px;\n\n  }\n\n  textarea, input:active {\n    outline: lightcoral;\n    outline-offset: 1px;\n  }\n\n  textarea, input:hover {\n    outline: none;\n  }\n`","import axios from \"axios\";\n\nexport const Base =  axios.create({\n    baseURL: process.env.REACT_APP_BASE_URL,\n    headers: {\n        Authorization: \"Client-ID O3rLFqpPo-J7uc6VSgVZGyBMb4SSNg-EYMcIWeVeQ1Q\",\n    },\n});\n","import styled from \"styled-components\";\n\nexport const TextStyled = styled.p`\n    font-size : ${props=>props.fontSize||\"16px\"};\n    font-weight: ${props=>props.fontWeight || 500};\n    color : ${props=>props.color || '#000'};\n    word-break: break-word;\n`","import React, {useRef, useState} from 'react';\nimport {FlexStyled} from \"../styledCss/FlexStyled\";\nimport {TextStyled} from \"../styledCss/TextStyled\";\nimport {IconButtonStyled} from \"../styledCss/ButtonStyled\";\nimport AddComment from \"./AddComment\";\nimport {PALLET} from \"../styledCss/Theme\";\nimport ReplyIcon from '@material-ui/icons/ReplyRounded';\n\nconst defaultComment = {\n    username: \"Abc\",\n    content: \"Wow anh dep qua di!\",\n    createdAt: '13/11/2022',\n    _id: '123123',\n    image_id: '123123asdsdqwe',\n    reply: []\n}\nconst RenderComment = ({localComment, isChild}) => {\n    const [isShowFormReply, setShowFormReply] = useState(false)\n    return (\n        <>\n            <FlexStyled gap={'4px'} alignItems={'center'}>\n                <TextStyled fontWeight={700} className={'mr-1 w-max truncate'} style={{width : '70px'}}>{localComment.username || 'anonymous'}</TextStyled>\n                <TextStyled fontWeight={400} fontSize='12px' className='ml-4'><p\n                    dangerouslySetInnerHTML={{__html: localComment.content}}/></TextStyled>\n            </FlexStyled>\n            <div className='mt-1'/>\n            <FlexStyled gap={'8px'} alignItems={'center'} justifyContent={'space-between'}>\n                <TextStyled fontSize={'12px'} className={'mr-4'}\n                            color={PALLET.GRAY}>{new Date(localComment.createdAt).toLocaleString()}</TextStyled>\n\n                {\n                    !isChild && <IconButtonStyled padding={'4px'} bgColor='#f5f5f5' className='ml-4' onClick={() => {\n                        setShowFormReply(true)\n                    }}>\n                        <ReplyIcon fontSize='small'/>\n                    </IconButtonStyled>\n                }\n\n            </FlexStyled>\n\n\n            {isShowFormReply &&\n                <AddComment isReply={true} parentId={localComment._id} setShowFormReply={setShowFormReply}/>}\n        </>\n    )\n}\n\nfunction Comment({comment = defaultComment, ...props}) {\n\n    return (\n        <FlexStyled justifyContent='space-between' flexDirection={'column'} gap={'8px'}>\n            <div className='w-full '>\n                <RenderComment localComment={comment}/>\n                <div className='ml-3'>\n                    {comment.reply.length > 0 && comment.reply.map((item, index) => <RenderComment key={index}\n                                                                                                   localComment={item}\n                                                                                                   isChild/>)}\n                </div>\n            </div>\n\n        </FlexStyled>\n    );\n}\n\nexport default Comment;","import {Base} from './Base'\n\n\nclass Comment{\n    constructor() {\n        this.userName =''\n        this.content =''\n        this.createdAt = Date.now()\n        this.image_id =''\n    }\n    getCommentByImageId(id){\n        return Base.get(`/comments/${id}`)\n    }\n}\nexport default new Comment()","import React, {createContext, useCallback, useEffect, useRef, useState} from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport {FlexStyled} from \"../styledCss/FlexStyled\";\nimport {IconButtonStyled} from \"../styledCss/ButtonStyled\";\nimport {PALLET} from \"../styledCss/Theme\";\nimport {TextStyled} from \"../styledCss/TextStyled\";\nimport {ArrowDownward} from \"@material-ui/icons\";\nimport Comment from \"./Comment\";\nimport AddComment, {FormWrapper} from \"./AddComment\";\nimport FileSaver from 'file-saver'\nimport {useParams} from \"react-router-dom\";\nimport {useQuery} from \"react-query\";\nimport styled from \"styled-components\";\nimport Box from \"@material-ui/core/Box\";\nimport ImageModel from \"../api/Image\";\nimport CommentModel from \"../api/Comment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Mainboard from \"./Mainboard\";\nimport socketIO from 'socket.io-client'\n\nconst SOCKET_EVENT = {\n    CONNECT: 'connect',\n    JOIN_ROOM: 'joinRoom',\n    CREATE_COMMENT: 'createComment',\n    // REPLY_COMMENT: 'replyComment',\n    SEND_REPLY_TO_CLIENT: 'sendReplyCommentToClient',\n    SEND_COMMENT_TO_CLIENT: 'sendCommentToClient',\n    EDIT_HEADER: 'editHeader',\n    SEND_EDIT_HEADER_TO_CLIENT: 'sendEditHeaderToClient',\n    DISCONNECT: 'disconnect'\n}\n\nexport const ImageContext = createContext({\n    imageId: null,\n    createCommentFunc: () => {\n    },\n    editHeader: () => {\n    }\n})\n\nconst socket = socketIO(process.env.REACT_APP_BASE_URL);\n\nfunction ImageDetail({...props}) {\n    const {id} = useParams()\n    const [imageDetail, setImageDetail] = useState(null)\n    const [commentList, setCommentList] = useState(null)\n    const {\n        data: {detail, references},\n        isFetching,\n        refetch: refetchImage\n    } = useQuery(['getImageDetail', id], async () => {\n            const result = await ImageModel.getDetail(id)\n            const [detail, ...references] = result.data.images\n            return {detail, references}\n        },\n        {\n            initialData: {},\n            enabled: !!id,\n            onSuccess: (data) => {\n                setImageDetail(data.detail)\n            }\n        }\n    )\n    const {\n        data: comments,\n        isFetching: fetchingComment,\n        refetch: refetchComment\n    } = useQuery(['getComment', id], async () => {\n        const result = await CommentModel.getCommentByImageId(id)\n        return result.data.comments\n    }, {\n        initialData: [],\n        enabled: !!id,\n        onSuccess: (value) => setCommentList(value)\n    })\n    const [showCommentList, toggleShowComment] = useState(false);\n    const [isEdit, toggleEdit] = useState(false);\n\n    const handleDownload = useCallback((e) => {\n        e.stopPropagation();\n        if (detail.srcImage) {\n            /* TODO : need change name image to unique */\n            FileSaver.saveAs(detail.srcImage, \"image\")\n        }\n    }, [])\n\n    const [isConnected, setIsConnected] = useState(socket.connected);\n    useEffect(() => {\n        console.log('effect run1')\n        socket.on(SOCKET_EVENT.CONNECT, (e) => {\n            setIsConnected(true);\n        })\n        socket.on(SOCKET_EVENT.DISCONNECT, () => {\n            setIsConnected(false);\n        });\n        return () => {\n            socket.off(SOCKET_EVENT.CONNECT);\n            socket.off(SOCKET_EVENT.DISCONNECT);\n        };\n    }, [])\n\n    useEffect(() => {\n        console.log('effect run2')\n\n        if (isConnected) {\n            socket.emit(SOCKET_EVENT.JOIN_ROOM, id);\n            socket.on(SOCKET_EVENT.SEND_COMMENT_TO_CLIENT, (newComment) => {\n                // setCommentSt([newComment,...commentsSt ])\n                // refetchComment()\n                setCommentList([newComment, ...commentList])\n                console.log('nhan duoc comment khac tu server', newComment)\n            })\n\n            socket.on(SOCKET_EVENT.SEND_REPLY_TO_CLIENT, (newComment) => {\n                // refetchComment()\n                // setCommentSt([newComment,...commentsSt])\n                setCommentList((commentList) => commentList.map(oldComment => {\n                    if (oldComment._id === newComment._id) return newComment\n                    else return oldComment\n                }))\n                console.log('nhan duoc comment reply khac tu server', newComment)\n            })\n            socket.on(SOCKET_EVENT.SEND_EDIT_HEADER_TO_CLIENT, (updatedImage) => {\n                // refetchImage()\n                setImageDetail(updatedImage)\n                toggleEdit(false)\n                console.log('nhan duoc header moi tu server', updatedImage)\n\n            })\n        }\n        return () => {\n            socket.off(SOCKET_EVENT.JOIN_ROOM);\n            socket.off(SOCKET_EVENT.SEND_COMMENT_TO_CLIENT);\n            socket.off(SOCKET_EVENT.SEND_REPLY_TO_CLIENT);\n            socket.off(SOCKET_EVENT.SEND_EDIT_HEADER_TO_CLIENT);\n        }\n    }, [socket, isConnected, id])\n\n    function createComment(comment) {\n        socket.emit(SOCKET_EVENT.CREATE_COMMENT, comment)\n    }\n\n    const titleInputEditRef = useRef()\n    const descriptionInputEditRef = useRef()\n\n    function editHeader() {\n        const title = titleInputEditRef.current.value;\n        const description = descriptionInputEditRef.current.value\n        if (!title) {\n            titleInputEditRef.current.focus()\n            return false\n        }\n        if (!description) {\n            descriptionInputEditRef.current.focus()\n            return false\n\n        }\n        socket.emit(SOCKET_EVENT.EDIT_HEADER, {title, description, id: id})\n    }\n\n\n    if (isFetching || fetchingComment) return <CircularProgress className='selfCenter'/>\n    if (!imageDetail) return <h1> ID invalid </h1>\n    return (\n        <ImageContext.Provider value={\n            {\n                imageId: id,\n                createCommentFunc: createComment,\n                editHeader: editHeader\n            }\n        }>\n            <BoxStyled>\n                <Grid container spacing={2} className='imageWrap'>\n                    <Grid item xs={12} md={6} style={{padding: '20px'}}>\n                        <img src={imageDetail?.srcImage} alt=\"pin\"/>\n                    </Grid>\n                    <Grid item xs={12} md={6} style={{padding: '20px'}}>\n                        {\n                            !isEdit ?\n                                <>\n                                    {/*====================Action==================================*/}\n                                    <FlexStyled justifyContent='space-between' alignItems='center'>\n                                        <FlexStyled gap={'4px'}>\n                                            <IconButtonStyled bgColor={PALLET.GRAY} color={PALLET.BLACK}\n                                                              onClick={handleDownload}>Download</IconButtonStyled>\n                                            <IconButtonStyled bgColor={PALLET.GRAY}\n                                                              onClick={() => toggleEdit(true)}>Edit</IconButtonStyled>\n                                        </FlexStyled>\n\n\n                                        <TextStyled fontSize={'12px'} fontWeight={400}\n                                                    color='gray'>{new Date(imageDetail?.updatedAt).toLocaleString()}</TextStyled>\n                                    </FlexStyled>\n                                    <br/>\n                                    {/*===================Description===============================*/}\n                                    {\n                                        imageDetail.title ? <TextStyled fontSize={'36px'}\n                                                                        fontWeight={700}>{imageDetail.title}</TextStyled>\n                                            : <TextStyled fontSize={'36px'}\n                                                          fontWeight={700}\n                                                          color={PALLET.GRAY}>{'Not have name yet'}</TextStyled>\n\n                                    }\n                                    <br/>\n                                    {\n                                        imageDetail.description ? <TextStyled fontSize={'16px'}\n                                                                              fontWeight={400}>{imageDetail.description}</TextStyled>\n                                            : <TextStyled fontSize={'16px'}\n                                                          fontWeight={400}\n                                                          color={PALLET.GRAY}>Not have description yet</TextStyled>\n                                    }\n\n\n                                    {/*==================Comment============================*/}\n                                    <br/>\n                                    <FlexStyled gap={'8px'} alignItems={'center'}>\n                                        <TextStyled fontWeight={600}\n                                                    fontSize={'20px'}>{commentList.length} Comments</TextStyled>\n                                        <BtnArrowIconStyled bgColor={'#fff'}\n                                                            onClick={() => toggleShowComment(!showCommentList)}>\n                                            <ArrowDownward\n                                                style={{\n                                                    transition: 'all 0.3s ease',\n                                                    transform: showCommentList ? \"rotate(0deg)\" : \"rotate(-90deg)\"\n                                                }}/>\n                                        </BtnArrowIconStyled>\n                                    </FlexStyled>\n                                    <br/>\n                                    {showCommentList &&\n                                    <CommentBlockWrapper flexDirection={'column'} gap={'20px'}>\n                                        {commentList.map((comment, index) => <Comment comment={comment}\n                                                                                      key={index}/>)}\n                                    </CommentBlockWrapper>\n                                    }\n                                    <br/>\n                                    <br/>\n                                    <AddComment/>\n                                </>\n                                : <>\n                                    {/*==================Edit Header============================*/}\n                                    <FormWrapper flexDirection='column'>\n                                        <FlexStyled alignItems='center'>\n                                            <label htmlFor='title'>Title</label>\n                                            <input type=\"text\" name=\"title\" ref={titleInputEditRef}\n                                                   defaultValue={imageDetail.title}/>\n                                        </FlexStyled>\n                                        <FlexStyled alignItems='center'>\n                                            <label htmlFor='description'>Description</label>\n                                            <textarea name=\"description\" id=\"description\" cols=\"30\" rows=\"5\"\n                                                      ref={descriptionInputEditRef} defaultValue={imageDetail.description}/>\n                                        </FlexStyled>\n                                        <FlexStyled gap={'4px'} justifyContent={'center'}>\n                                            <IconButtonStyled bgColor={PALLET.RED}\n                                                              color={PALLET.WHITE}\n                                                              onClick={() => editHeader()}>Save</IconButtonStyled>\n                                            <IconButtonStyled bgColor={PALLET.GRAY}\n                                                              onClick={() => toggleEdit(false)}>Cancel</IconButtonStyled>\n                                        </FlexStyled>\n                                    </FormWrapper>\n                                </>\n                        }\n                    </Grid>\n                </Grid>\n            </BoxStyled>\n            <br/>\n            <br/>\n            <TextStyled fontWeight={700} fontSize={'24px'} className={'ml-4'}>More like this</TextStyled>\n            <Mainboard pins={references}/>\n        </ImageContext.Provider>\n\n    );\n}\n\nexport default ImageDetail;\n\nconst CommentBlockWrapper = styled(FlexStyled)`\n  box-sizing: border-box;\n  height: max-content;\n  max-height: 500px;\n  //overflow: hidden;\n  overflow-y: scroll;\n`\n\nconst BoxStyled = styled(Box)`\n  display: flex;\n  justify-content: center;\n  background-color: #fff;\n  padding-top: 20px;\n  padding-bottom: 30px;\n\n  .imageWrap {\n    box-shadow: rgb(0 0 0 / 10%) 0px 1px 20px 0px;\n    border-radius: 20px;\n    width: 65vw;\n    height: max-content;\n  }\n\n  @media (max-width: 768px) {\n    padding-top: 10px;\n    .imageWrap {\n      width: 90vw;\n    }\n  }\n\n  img {\n    display: block;\n    width: 100%;\n    height: auto;\n    border-radius: 12px;\n  }\n`;\n\n\nconst BtnArrowIconStyled = styled(IconButtonStyled)`\n  :hover {\n    background-color: #d9d9d9;\n  }\n`"],"sourceRoot":""}